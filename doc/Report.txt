/*
    Inlämningsuppgift 3 Objektorienterad programmering med Java sommaren 2013
    Kristian Grossman-Madsen
    https://github.com/kilskrift/oopj13stu3.git
 */

Packa upp zip-filen & kör programmet.

Själva programmet

Se README-filen för instruktion för hur man bygger & kör programmet.)
tl;dr
$ java -jar uppgift3.jar <matches>

I min implementation av uppgift 3 ligger den mesta logiken i klasserna CardPanel,CardPanelMouseListener, & Card självt.

Programmet startas när main() skapar en instans av CardTable-klassen, som innehåller en CardPanel som i sin tur
innehåller korten i en ArrayList. CardPanel innehåller också en hjälpklass för att hantera mus-event.

Programmet följer i stort upplägget från exemplen i instuderingsavsnitten. Jag började med att skapa ett fönster, sedan
lade jag till en JPanel där jag ritade upp först ett, sedan flera kort. Jag byggde hela tiden på med ny funktionalitet i
den takt den behövdes. Efter att ha lagt till lite kod för att kunna vända på kort implementerade jag en eventlyssnare
som dels vände kort vid mustryckningar, dels flyttade & ritade om kort. Tyvärr kom jag även denna gång i tidsnöd & fick
lämna in koden utan att ha implementerat att flyttade kort skulle läggas "överst" på spelbordet. Även första utkastet av
rapporten blev lidande, och var ganska summarisk. Förhoppningsvis kan git-historiken hjälpa koden att tala för sig ändå.

Titta alltså gärna i mina commits på github för att se hur koden såg ut i respektive "steg":

https://github.com/kilskrift/oopj13stu3/commits/master

Korten ritas ut i den ordning de lagts in i ArrayListen, med andra ord är det de sist inlagda korten som ligger "överst"
på spelbordet. Det framgår i koden i CardPanels paintComponent-metod, där korten ritas ut. Jämför hur jag går igenom
listan av kort i omvänd ordning i getTopCardUnderMouse() för att returnera det "översta" med första träffen, medan de
"lägre" liggande korten ritas över av senare kort i listan.

När man drar ett kort läggs det nu överst direkt, så att det skall se bra ut när man drar ett kort som legat under ett
annat med musen.

Igen var bland det svåraste att göra en bra paketering av körbar kod. Jag behöver läsa in mig ordentligt på hur Java
hanterar classpath, här har det varit ett problem att använda en utvecklingsmiljö, som jag upplever löser detta lite
väl "magiskt" utan att redovisa hur den hanterar källkod i en mapp, bilder i en annan osv. Jag har skickat med en färdig
jar-fil tillsvidare. Se även README-filen för info om hur man bygger sin egen jarfil.

Detta var annars en rolig uppgift, som var ganska rättfram om man följde föreläsningsanteckningarna & exempelkoden som
hörde till dem. Det var alltså inte så jobbigt att komma igång med att koda GUI i Java som jag kanske trott.

I natten, Kristian G. Madsen
